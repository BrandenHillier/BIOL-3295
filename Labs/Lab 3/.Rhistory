# Just like the discrete time model we need to provide a starting
# population size
N0 = 10
#... and we need to list the values of time that we want to solve over
times = seq(0,10,.1)
# And the values of the parameters.
b=1.1
d=0.05
# Let's learn about the ode() function:
?ode
# We will use the ode() function from the deSolve package to solve the differential
# equation dN/dt = r*N. Solving the differential equation will allow us to know the
# values of N, the population size, not just the values of the change in N, dN/dt.
# the arguments of the ode function are (and the order is critically important):
# 1) the initial values of the variables. In this case, the initial value of N, the
# population size. This is N0 = 10
# 2) the times we want to solve over. This is times = seq(0,100,1).
# 3) the function that calculates dN/dt and returns the result as a list. This is
# ExpGrowth()
# 4) the parameters for the dN/dt function. These are "b" and "d" and we need to
# label them as b and d (otherwise how will R know which is which) and provide the
# values (also called b and d).
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d))
head(out)
# Note that "1" is at the top of column 2. If we want a nicer heading we can execute
# our command as:
out = ode(y=c(N=N0),time=times,func=ExpGrowth,p=c(b=b,d=d))
head(out)
plot(out[,1], out[,2], typ="l", xlab = "time", ylab = "population size", main = "Exponential Growth")
SeasonalGeoGrowth = function(May.Start,b,d,year.start,year.end){
N.May =NULL
N.Oct = NULL
Year=NULL
N.May[1]=May.Start
Year[1]=year.start
# Calculate the October values for the first year only.
N.Oct[1] = N.May[1] + b*N.May[1] # this says there is no adult
# mortality over the summer, and adds the births to the May popn size
for(t in seq(1,year.end-year.start,1)){
# Now let's do the calculations for other years:
Year[t+1] = year.start+t
# The May population size is the previous year's October population
# size minus all the mortality that is assumed to have occured over the winter
N.May[t+1] = N.Oct[t] - d*N.Oct[t]
# The October population size is the May population size (for the same year)
# plus all the births from the chicks.
N.Oct[t+1] = N.May[t+1] + b*N.May[t+1]
}
Popn.Size = data.frame(year = Year, May = N.May, Oct = N.Oct)
return(Popn.Size)
}
#Q3.2 Why is the formula for the population size in May: N.May[t+1] = N.Oct[t] - d*N.Oct[t]?
#Q3.3 Will the population size in May ever be larger than the population size
# in October of the previous year?
# Let's try out our geometric growth function that specifically attributes births and deaths
# to particular times of the year:
Seasonal.ProtectionIsland = SeasonalGeoGrowth(10,2.65, 17/110,1936,1938)
print(Seasonal.ProtectionIsland)
# Now let's plot the results versus the data again.
# Let's set Jan 1936 to t = 0.
# plot the data:
plot(c(5/12, 1+5/12, 1+10/12, 2+11/12), c(10,35,110,400), xlab = "years since Jan 1936", ylab = "population size")
# for the above 10/12 indicates October.
# now let's plot in the predictions from Seasonal.ProtectionIsland:
lines(c(5/12, 10/12, 1+5/12, 1+10/12, 2+5/12, 2+10/12), unname(c(Seasonal.ProtectionIsland[1,2:3], Seasonal.ProtectionIsland[2,2:3], Seasonal.ProtectionIsland[3,2:3]))
# If you aren't sure what the below code corresponds to, just run that line below:
unname(c(Seasonal.ProtectionIsland[1,2:3], Seasonal.ProtectionIsland[2,2:3], Seasonal.ProtectionIsland[3,2:3]))
# (basically, we've just made a list with May values followed by October values)
unname(c(Seasonal.ProtectionIsland[1,2:3], Seasonal.ProtectionIsland[2,2:3], Seasonal.ProtectionIsland[3,2:3]))
lines(c(5/12, 10/12, 1+5/12, 1+10/12, 2+5/12, 2+10/12), c(Seasonal.ProtectionIsland[1,2:3], Seasonal.ProtectionIsland[2,2:3], Seasonal.ProtectionIsland[3,2:3]))
ProtectionIsland
ProtectionIsland
ProtectionIsland$time = ProtectionIsland$time+10/12
print(ProtectionIsland)
lines(ProtectionIsland$time, ProtectionIsland$Popn.Size, lty=2)
GeoGrowth = function(Nstart,b,d,tstart,tend){
N=NULL
Time=NULL
N[1]=Nstart
Time[1]=tstart
for(t in seq(1,tend-tstart,1)){
lambda = 1+b-d
N[t+1] = lambda*N[t]
Time[t+1] = tstart+t
}
Popn.Size = data.frame(time = Time, Popn.Size = N)
return(Popn.Size)
}
GeoGrowth(1,1.5,.3,1,5)
# What do each of the arguments of the user-defined function GeoGrowth called on line 181 correspond to?
# (i.e, what do the numbers 1, 1.5, .3, 1, and 5 correspond to?)
# The function GeoGrowth is a little different than the code from Section 1.
# Try this:
GeoGrowth(1,1.5,.3,2001,2005)
# In the user-defined function, GeoGrowth(), what values of t does the loop
# run over?
seq(1,tend-tstart,1)
# Opps, that gives an error because we didn't say tstart = 2001 and tend = 2005,
# rather we had just set the appropriate function arguments to 2001 and 2005.
# Try this instead:
seq(1,2005-2001,1)
# Note that the first element of Popn.Size is NStart, and when
# t = 4, the fifth element of Popn.Size is calculated because the value
# is assigned to the (t+1)th position in the list.
# There are no questions to hand in from Section 2.
## 3. PROTECTION ISLAND
# These questions pertain to the Handouts: Protection Island.pdf and Protection Island
# Solutions.pdf.
# First, we would like to plot the data.
# May is the 5th month
# October is the 10th month.
# We note that May is 5 months before the Oct-November census date.
Data = data.frame(time = c(-5/12, 1-5/12, 1,2), Popn.Size = c(10,35,110,400))
plot(Data$time, Data$Popn.Size, xlab = "Years since October 1936", ylab = "Popn size")
# Let's change the axes limits to try to guess the population size at t=0.
plot(Data$time, Data$Popn.Size, xlab = "Years since October 1936", ylab = "Popn size", typ="l", xlim = c(-.5,.5), ylim=c(10,30))
# typ=l changes the plot to a line graph rather than a scatter plot
# as outlined in "Protection Island - SOLUTIONS.pdf" an approximate
# value of N_0 is 20.
# Let's use the estimated parameter (b and d) values from "Protection Island - SOLUTIONS.pdf" to
# predict the population size from t =0 to t = 2 (Oct 1936 to 1938)
ProtectionIsland = GeoGrowth(20,2.63,17/110,0,2)
print(ProtectionIsland)
# Let's plot the geometric growth predictions to compare with the data.
# plot the data:
plot(Data$time, Data$Popn.Size, xlab = "Years since October 1936", ylab = "Popn size")
# Now add in lines for the predicted values assuming geometric growth:
lines(ProtectionIsland$time, ProtectionIsland$Popn.Size)
# The predicted values are the lines, and we see that they're a bit of an under estimate
# at t=1 and t=2.
# Let's try some other versions of the model. Let's suppose May is our census point.
plot(c(0,1,1+5/12, 2+5/12), c(10,35,110,400), ylab = "Popn size", xlab = "years since May 1936", xlim = c(0,3), ylim = c(0,400))
#Q3.1 What is the difference between the x-axis label on this figure and the previous one?
# i.e. how is t=0 defined differentily in either case?
# Let's predict the May population sizes:
ProtectionIsland.May = GeoGrowth(10,2.65,17/110,0,3)
lines(ProtectionIsland.May$time, ProtectionIsland.May$Popn.Size)
# Interesting... the model predicts May to May well, but is thrown-off for the Oct-Nov data.
# Let's now try to derive a better model for the Pheasant population dynamics by considering
# the timing of the breeding season. We know that pheasants breed during the summer, so no pheasants are
# born over the winter. Let's assume that by May all the adult pheasants that were going to die by
# Novemeber are already dead (no adult deaths over the summer). We'll also assume that all chicks
# have hatched by November. Let's make the function:
SeasonalGeoGrowth = function(May.Start,b,d,year.start,year.end){
N.May =NULL
N.Oct = NULL
Year=NULL
N.May[1]=May.Start
Year[1]=year.start
# Calculate the October values for the first year only.
N.Oct[1] = N.May[1] + b*N.May[1] # this says there is no adult
# mortality over the summer, and adds the births to the May popn size
for(t in seq(1,year.end-year.start,1)){
# Now let's do the calculations for other years:
Year[t+1] = year.start+t
# The May population size is the previous year's October population
# size minus all the mortality that is assumed to have occured over the winter
N.May[t+1] = N.Oct[t] - d*N.Oct[t]
# The October population size is the May population size (for the same year)
# plus all the births from the chicks.
N.Oct[t+1] = N.May[t+1] + b*N.May[t+1]
}
Popn.Size = data.frame(year = Year, May = N.May, Oct = N.Oct)
return(Popn.Size)
}
#Q3.2 Why is the formula for the population size in May: N.May[t+1] = N.Oct[t] - d*N.Oct[t]?
#Q3.3 Will the population size in May ever be larger than the population size
# in October of the previous year?
# Let's try out our geometric growth function that specifically attributes births and deaths
# to particular times of the year:
Seasonal.ProtectionIsland = SeasonalGeoGrowth(10,2.65, 17/110,1936,1938)
print(Seasonal.ProtectionIsland)
# Now let's plot the results versus the data again.
# Let's set Jan 1936 to t = 0.
# plot the data:
plot(c(5/12, 1+5/12, 1+10/12, 2+11/12), c(10,35,110,400), xlab = "years since Jan 1936", ylab = "population size")
# for the above 10/12 indicates October.
# now let's plot in the predictions from Seasonal.ProtectionIsland:
lines(c(5/12, 10/12, 1+5/12, 1+10/12, 2+5/12, 2+10/12), c(Seasonal.ProtectionIsland[1,2:3], Seasonal.ProtectionIsland[2,2:3], Seasonal.ProtectionIsland[3,2:3]))
# If you aren't sure what the below code corresponds to, just run that line below:
unname(c(Seasonal.ProtectionIsland[1,2:3], Seasonal.ProtectionIsland[2,2:3], Seasonal.ProtectionIsland[3,2:3]))
# (basically, we've just made a list with May values followed by October values)
# Wow! That looks like some pretty good predictions (aside from a bit of an underestimate in October 1938)
# Let's plot our non-seasonal version of the geometric growth function as a dotted line. Let's just remind
# ourselves about the format of the predictions:
ProtectionIsland
# .... where here time = 0 meant October 1936. On our current plot October 1936 is time = 10/12, and so we
# need to add 10/12 to all the values of time in ProtectionIsland if we want to add these to our
# current plot where t=0 means January 1936.
time2 = ProtectionIsland$time+10/12
print(ProtectionIsland)
# Now lets add the non-seasonal geometeric growth to the plot
lines(time2, ProtectionIsland$Popn.Size, lty=2)
# Note: lty=2 is giving us the dashed line
ExpGrowth <- function(t,N,p){
dN = (b - d)*N
# Note that the function called by ode() is required to
# return a list.
return(list(dN))
}
ExpGrowth <- function(t,N,p){
dN = (b - d)*N
# Note that the function called by ode() is required to
# return a list.
return(list(dN))
}
out = ode(N0,times,ExpGrowth,p=NULL, method = "ode45")
ExpGrowth <- function(t,N,p){
dN = (b - d)*N
# Note that the function called by ode() is required to
# return a list.
return(list(dN))
}
# To solve the model we need to provide specific values of the parameters:
b = 1
d = 0.99
# .. and the initial population size
N0 = 10
# The times we want to calculate the solutions for:
times = seq(0,10,.1)
# We will use the ode() function from the deSolve package to solve the
# exponential growth model.
# Let's see what arguments are required for the ode() function.
?ode
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d), method = "ode45")
library("deSolve", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
ExpGrowth <- function(t,N,p){
dN = (b - d)*N
# Note that the function called by ode() is required to
# return a list.
return(list(dN))
}
# To solve the model we need to provide specific values of the parameters:
b = 1
d = 0.99
# .. and the initial population size
N0 = 10
# The times we want to calculate the solutions for:
times = seq(0,10,.1)
# We will use the ode() function from the deSolve package to solve the
# exponential growth model.
# Let's see what arguments are required for the ode() function.
?ode
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d), method = "ode45")
head(out)
c(b=b,d=d)
head(out)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l")
lines(times, N0*exp((b-d)*times), col="red")
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l")
lines(times, N0*exp((b-d)*times), col="red")
# To solve the model we need to provide specific values of the parameters:
b = 1
d = 0.95
# .. and the initial population size
N0 = 10
# The times we want to calculate the solutions for:
times = seq(0,10,.1)
# We will use the ode() function from the deSolve package to solve the
# exponential growth model.
# Let's see what arguments are required for the ode() function.
?ode
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d), method = "ode45")
# Note that the third argument of ExpGrowth is p, therefore, we need
# to tell R which of the numbers is b and which is d: On the left hand
# side of the ='s we are specifying the name "b" and on the right hand
# side we are supplying the numerical value b = 0.9.
c(b=b,d=d)
head(out)
# Let's plot our output (the ode helpful gives examples of how to do this too)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l")
lines(times, N0*exp((b-d)*times), col="red")
# To solve the model we need to provide specific values of the parameters:
b = 1
d = 0.95
# .. and the initial population size
N0 = 10
# The times we want to calculate the solutions for:
times = seq(0,30,.1)
# We will use the ode() function from the deSolve package to solve the
# exponential growth model.
# Let's see what arguments are required for the ode() function.
?ode
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d), method = "ode45")
# Note that the third argument of ExpGrowth is p, therefore, we need
# to tell R which of the numbers is b and which is d: On the left hand
# side of the ='s we are specifying the name "b" and on the right hand
# side we are supplying the numerical value b = 0.9.
c(b=b,d=d)
head(out)
# Let's plot our output (the ode helpful gives examples of how to do this too)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l")
lines(times, N0*exp((b-d)*times), col="red")
# To solve the model we need to provide specific values of the parameters:
b = 1
d = 0.95
# .. and the initial population size
N0 = 10
# The times we want to calculate the solutions for:
times = seq(0,50,.1)
# We will use the ode() function from the deSolve package to solve the
# exponential growth model.
# Let's see what arguments are required for the ode() function.
?ode
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d), method = "ode45")
# Note that the third argument of ExpGrowth is p, therefore, we need
# to tell R which of the numbers is b and which is d: On the left hand
# side of the ='s we are specifying the name "b" and on the right hand
# side we are supplying the numerical value b = 0.9.
c(b=b,d=d)
head(out)
# Let's plot our output (the ode helpful gives examples of how to do this too)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l")
lines(times, N0*exp((b-d)*times), col="red")
# We will use the ode() function from the deSolve package to solve the
# exponential growth model.
# Let's see what arguments are required for the ode() function.
?ode
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d), method = "ode45")
# Note that the third argument of ExpGrowth is p, therefore, we need
# to tell R which of the numbers is b and which is d: On the left hand
# side of the ='s we are specifying the name "b" and on the right hand
# side we are supplying the numerical value b = 1.
c(b=b,d=d)
head(out)
# and column 2 is on the y-axis to give us a graph of population size versus time.
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col=red)
# From class we saw that it was possible to solve the exponential growth model
# using calculus. Let's add points that shows the solution using calculus:
points(times, N0*exp((b-d)*times))
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col=red)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red")
points(times, N0*exp((b-d)*times))
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red", lwd=2)
# From class we saw that it was possible to solve the exponential growth model
# using calculus. Let's add points that shows the solution using calculus:
points(times, N0*exp((b-d)*times), pch=19)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red", lwd=2)
# From class we saw that it was possible to solve the exponential growth model
# using calculus. Let's add points that shows the solution using calculus:
points(times, N0*exp((b-d)*times), pch=19)
# and column 2 is on the y-axis to give us a graph of population size versus time.
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red", lwd=2)
# From class we saw that it was possible to solve the exponential growth model
# using calculus. Let's add points that shows the solution using calculus:
points(times, N0*exp((b-d)*times), pch=4)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red", lwd=2)
points(times, N0*exp((b-d)*times), pch=4)
points(times, N0*exp((b-d)*times))
points(times, N0*exp((b-d)*times),pch=19)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red", lwd=2)
points(times, N0*exp((b-d)*times),pch=19)
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red", lwd=2)
# From class we saw that it was possible to solve the exponential growth model
# using calculus. Let's add points that shows the solution using calculus:
points(times, N0*exp((b-d)*times))
# To solve the model we need to provide specific values of the parameters:
b = 1
d = 0.95
# .. and the initial population size
N0 = 10
# ... and times we want to calculate the solutions for:
times = seq(0,50,1)
# We will use the ode() function from the deSolve package to solve the
# exponential growth model.
# Let's see what arguments are required for the ode() function.
?ode
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d), method = "ode45")
# Note that the third argument of ExpGrowth is p, therefore, we need
# to tell R which of the numbers is b and which is d: On the left hand
# side of the ='s we are specifying the name "b" and on the right hand
# side we are supplying the numerical value b = 1.
c(b=b,d=d)
head(out)
# Let's plot our output (the ode help file gives examples of how to do this too)
# The code below specifies that column 1 of "out" is on the x-axis
# and column 2 is on the y-axis to give us a graph of population size versus time.
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red", lwd=2)
# From class we saw that it was possible to solve the exponential growth model
# using calculus. Let's add points that shows the solution using calculus:
points(times, N0*exp((b-d)*times))
# It's a bit hard to
# Let's slightly modify the old geometric growth function so that
# lambda can be supplied as an argument without requiring b and d.
GeoGrowth.lambda = function(Nstart,lambda,tstart,tend){
N=NULL
Time=NULL
N[1]=Nstart
Time[1]=tstart
for(t in seq(1,tend-tstart,1)){
N[t+1] = lambda*N[t]
Time[t+1] = tstart+t
}
Popn.Size = data.frame(time = Time, Popn.Size = N)
return(Popn.Size)
}
DT = GeoGrowth.lambda(N0,lambda,0,10)
head(DT)
points(DT$time, DT$Popn.Size)
# Let's slightly modify the old geometric growth function so that
# lambda can be supplied as an argument without requiring b and d.
GeoGrowth.lambda = function(Nstart,lambda,tstart,tend){
N=NULL
Time=NULL
N[1]=Nstart
Time[1]=tstart
for(t in seq(1,tend-tstart,1)){
N[t+1] = lambda*N[t]
Time[t+1] = tstart+t
}
Popn.Size = data.frame(time = Time, Popn.Size = N)
return(Popn.Size)
}
DT = GeoGrowth.lambda(N0,lambda,0,50)
head(DT)
# To add points to an existing plot use:
points(DT$time, DT$Popn.Size)
lambda = exp(b-d)
# Let's slightly modify the old geometric growth function so that
# lambda can be supplied as an argument without requiring b and d.
GeoGrowth.lambda = function(Nstart,lambda,tstart,tend){
N=NULL
Time=NULL
N[1]=Nstart
Time[1]=tstart
for(t in seq(1,tend-tstart,1)){
N[t+1] = lambda*N[t]
Time[t+1] = tstart+t
}
Popn.Size = data.frame(time = Time, Popn.Size = N)
return(Popn.Size)
}
DT = GeoGrowth.lambda(N0,lambda,0,50)
head(DT)
# To add points to an existing plot use:
points(DT$time, DT$Popn.Size)
b-d
lambda
# Let's slightly modify the old geometric growth function so that
# lambda can be supplied as an argument without requiring b and d.
GeoGrowth.lambda = function(Nstart,lambda,tstart,tend){
N=NULL
Time=NULL
N[1]=Nstart
Time[1]=tstart
for(t in seq(1,tend-tstart,1)){
N[t+1] = lambda*N[t]
Time[t+1] = tstart+t
}
Popn.Size = data.frame(time = Time, Popn.Size = N)
return(Popn.Size)
}
DT = GeoGrowth.lambda(N0,lambda,0,50)
head(DT)
# To add points to an existing plot use:
points(DT$time, DT$Popn.Size)
points(DT$time, DT$Popn.Size, pch=4)
ExpGrowth <- function(t,N,p){
dN = (b - d)*N
# Note that the function called by ode() is required to
# return a list.
return(list(dN))
}
# To solve the model we need to provide specific values of the parameters:
b = 1
d = 0.95
# .. and the initial population size
N0 = 10
# ... and times we want to calculate the solutions for:
times = seq(0,50,1)
# We will use the ode() function from the deSolve package to solve the
# exponential growth model.
# Let's see what arguments are required for the ode() function.
?ode
out = ode(N0,times,ExpGrowth,p=c(b=b,d=d), method = "ode45")
# Note that the third argument of ExpGrowth is p, therefore, we need
# to tell R which of the numbers is b and which is d: On the left hand
# side of the ='s we are specifying the name "b" and on the right hand
# side we are supplying the numerical value b = 1.
c(b=b,d=d)
head(out)
# Let's plot our output (the ode help file gives examples of how to do this too)
# The code below specifies that column 1 of "out" is on the x-axis
# and column 2 is on the y-axis to give us a graph of population size versus time.
plot(out[,1], out[,2], xlab = "time", ylab = "population size", typ="l", col="red", lwd=2)
# From class we saw that it was possible to solve the exponential growth model
# using calculus. Let's add points that shows the solution using calculus:
points(times, N0*exp((b-d)*times))
# We plotted the calculus solution as points, because plotted as lines, the two lines
# fall exactly on top of each other.
# We note that geometric growth (discrete time) gives exact predictions to
# exponential growth when exp(r) = lambda.
# Now let's test this.
lambda = exp(b-d)
# Let's slightly modify the old geometric growth function so that
# lambda can be supplied as an argument without requiring b and d.
GeoGrowth.lambda = function(Nstart,lambda,tstart,tend){
N=NULL
Time=NULL
N[1]=Nstart
Time[1]=tstart
for(t in seq(1,tend-tstart,1)){
N[t+1] = lambda*N[t]
Time[t+1] = tstart+t
}
Popn.Size = data.frame(time = Time, Popn.Size = N)
return(Popn.Size)
}
DT = GeoGrowth.lambda(N0,lambda,0,50)
head(DT)
# To add points to an existing plot use:
points(DT$time, DT$Popn.Size, pch=4)
